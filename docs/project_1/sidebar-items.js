initSidebarItems({"struct":[["Problem","A struct to encapsulate information about the current problem.  ## Properties - `state`:               A smart pointer to an instance of struct State. - `goal_state`:          A vector of integers defining the goal state. - `visited`:             A HashSet that stores all states that have already been visited. - `under_consideration`: A BinaryHeap that keeps track of states we'll be choosing the next state from. - `no_generated`:        A counter to keep track of number of nodes generated. - `no_expanded`:         A counter to keep track of number of nodes expanded.  - `heuristic`:           A string describing the current heuristic being used."],["State","A struct to encapsulate State information.  ## Properties - `is`:      A vector of integers, used to store the positions of numbers in the puzzle. - `cost`:    Cost of this state (g() + h()) - `g`:       Cost to get here from the root. - `h`:       Estimated cost to the goal state. - `kind`:    The kind of action to be enacted to reach this state from the parent.   ## Further details  I am using Binary heap as a priority queue to choose the next state to move to.  The priority here is the \"cost\" in reverse order. To implement this I need to implement ordering trait for State.  This is done via implementing 4 traits - `Ord`, `PartialOrd`, `Eq` (or equality), `PartialEq`.   The ordering trait is implemented such that a State with a lower cost is considered greater than a state with a higher cost."]]});